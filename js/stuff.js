// Generated by CoffeeScript 1.4.0
(function() {
  var WhacAMu;

  WhacAMu = (function() {

    function WhacAMu(timeLimit) {
      this.score = 0;
      this.timeLimit = this.timeRemain = timeLimit;
      this.scorePanel = $("#score");
      this.timerPanel = $("#timer");
      this.field = $("section.holes");
      this.createHoles();
      this.createHammer();
      this.bindControls();
      this.pauseGame();
      this.val = 0;
      this.timerPanel.html(timeLimit);
    }

    WhacAMu.prototype.timingDownFrom = function(secs) {
      var self;
      self = this;
      return this.countDown = setInterval(function() {
        self.timeRemain = self.timeRemain - 1;
        self.timerPanel.html(self.timeRemain);
        if (self.timeRemain === 0) {
          return self.timeOut();
        }
      }, 850);
    };

    WhacAMu.prototype.timeOut = function() {
      var self;
      self = this;
      this.pauseGame();
      this.timeRemain = this.timeLimit;
      _gaq.push(["_trackEvent", "Game play", "Got " + self.score]);
      return clearInterval(this.countDown);
    };

    WhacAMu.prototype.bindControls = function() {
      var self;
      self = this;
      $("#startGame").click(function() {
        return self.startGame();
      });
      $("#pauseGame").click(function() {
        return self.pauseGame();
      });
      return $("#reset").click(function() {
        return self.reset();
      });
    };

    WhacAMu.prototype.changeButtonState = function(btn) {
      $(".btn").removeClass("disabled");
      return $(btn).addClass("disabled");
    };

    WhacAMu.prototype.startGame = function() {
      var self;
      self = this;
      if (this.timeRemain === this.timeLimit) {
        this.updateScore(0 - this.score);
      }
      this.gameStarted = true;
      this.muuuu();
      this.randomMu = setInterval(function() {
        return self.muuuu({
          noTrigger: true
        });
      }, 5000);
      this.changeButtonState("#startGame");
      this.timerPanel.html(self.timeRemain);
      return this.timingDownFrom(this.timeRemain);
    };

    WhacAMu.prototype.createHoles = function() {
      var i, _results;
      i = 0;
      _results = [];
      while (i < 16) {
        i++;
        _results.push(this.field.append("<div class=\"hole\"></div>"));
      }
      return _results;
    };

    WhacAMu.prototype.getRandom = function(last_muuu) {
      var val;
      val = _.random(0, $(".hole").length - 1);
      while (val === last_muuu) {
        val = _.random(0, $(".hole").length - 1);
      }
      return val;
    };

    WhacAMu.prototype.muuuu = function(options) {
      var mu, self;
      self = this;
      if (this.gameStarted) {
        this.val = this.getRandom(this.val);
        mu = $(".hole").eq(self.val).addClass("out");
        return this.bindWhack(mu, options);
      }
    };

    WhacAMu.prototype.createHammer = function() {
      var self;
      self = this;
      $(window).bind("mousemove", function(e) {
        var inField;
        inField = e.pageY > self.field.position().top && e.pageX > self.field.position().left && e.pageY < (self.field.position().top + self.field.height()) && e.pageX < (self.field.position().left + self.field.width());
        if (inField) {
          return $("#hammer").css({
            "top": e.pageY,
            "left": e.pageX
          });
        }
      });
      return $(window).bind("click", function(e) {
        var inField;
        inField = e.pageY > self.field.position().top && e.pageX > self.field.position().left && e.pageY < (self.field.position().top + self.field.height()) && e.pageX < (self.field.position().left + self.field.width());
        if (inField) {
          $("#hammer").addClass("smash").find("img").attr("src", "img/hammering.png");
          return setTimeout(function() {
            return $("#hammer").removeClass("smash").find("img").attr("src", "img/hammer.png");
          }, 200);
        }
      });
    };

    WhacAMu.prototype.bindWhack = function(mu, options) {
      var newtime, self;
      self = this;
      options = $.extend({}, options);
      newtime = setTimeout(function() {
        if (mu.is(".out")) {
          self.updateScore(-10);
        }
        mu.removeClass("out").unbind("click");
        if (!options.noTrigger) {
          return self.muuuu();
        }
      }, 2000);
      return mu.bind("click", function() {
        mu.removeClass("out").unbind("click");
        if (!options.noTrigger) {
          self.muuuu();
        }
        self.updateScore(+10);
        return clearTimeout(newtime);
      });
    };

    WhacAMu.prototype.updateScore = function(score) {
      this.score = this.score + score;
      return this.scorePanel.html(this.score);
    };

    WhacAMu.prototype.pauseGame = function() {
      var self;
      self = this;
      $(".hole").removeClass("out");
      clearInterval(self.randomMu);
      this.gameStarted = false;
      this.changeButtonState("#pauseGame");
      return clearInterval(this.countDown);
    };

    WhacAMu.prototype.reset = function() {
      var self;
      self = this;
      this.updateScore(0 - this.score);
      this.timerPanel.html(self.timeRemain = self.timeLimit);
      this.pauseGame();
      return this.changeButtonState("#reset");
    };

    return WhacAMu;

  })();

  jQuery(function() {
    new WhacAMu(3);
    $.each($("a[id]"), function(index, ele) {
      return $(ele).click(function(e) {
        e.stopImmediatePropagation();
        return _gaq.push(["_trackEvent", "Game", e.target.id, "actions"]);
      });
    });
    return $.each($("a:not([id])"), function(index, ele) {
      return $(ele).click(function(e) {
        e.stopImmediatePropagation();
        return _gaq.push(["_trackEvent", "Click links", e.currentTarget.href, "links"]);
      });
    });
  });

}).call(this);
